/**********************************************************************

  Copyright (C) 2008-2015 Anton Simakov

  This file is part of Molekulo.
  For more information, see <http://code.google.com/p/molekulo/>

  Molekulo is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Molekulo is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Molekulo. If not, see <http://www.gnu.org/licenses/>.

 **********************************************************************/

#include "formats/dalton/dalton_mol_entry.h"
#include <sstream>
#include <iomanip>

#include "chem/atom.h"
#include "formats/text_file.h"
#include "io/logger.h"

const std::map<std::string, ccio::dalton_mol_entry::basis_type> ccio::dalton_mol_entry::string_to_basis_type = {
    { "ATOMBASIS", ccio::dalton_mol_entry::basis_type::atombasis },
    { "BASIS",     ccio::dalton_mol_entry::basis_type::basis     },
    { "INTGRL",    ccio::dalton_mol_entry::basis_type::intgrl    }
};

const std::map<ccio::dalton_mol_entry::basis_type, std::string> ccio::dalton_mol_entry::basis_type_to_string = {
    { ccio::dalton_mol_entry::basis_type::atombasis, "ATOMBASIS" },
    { ccio::dalton_mol_entry::basis_type::basis,     "BASIS"     },
    { ccio::dalton_mol_entry::basis_type::intgrl,    "INTGRL"    }
};

const std::map<ccio::dalton_mol_entry::unit_of_length, std::string> ccio::dalton_mol_entry::unit_of_length_to_string = {
    { ccio::dalton_mol_entry::unit_of_length::bohr,     "Bohr"     },
    { ccio::dalton_mol_entry::unit_of_length::angstrom, "Angstrom" }
};

const std::map<ccio::dalton_mol_entry::gaussians_type, std::string> ccio::dalton_mol_entry::gaussians_type_to_string = {
    { ccio::dalton_mol_entry::gaussians_type::spherical, "Spherical" },
    { ccio::dalton_mol_entry::gaussians_type::cartesian, "Cartesian" },
    { ccio::dalton_mol_entry::gaussians_type::own,       "Own"       }
};

std::ostream& ccio::operator<<(std::ostream& ostream,
        ccio::dalton_mol_entry::basis_type basis_type)
{
    auto it = ccio::dalton_mol_entry::basis_type_to_string.find(basis_type);
    if (it != ccio::dalton_mol_entry::basis_type_to_string.end()) {
        ostream << it->second;
    } else {
        throw std::logic_error("Uknown basis type.");
    }
    return ostream;
}

std::ostream& ccio::operator<<(std::ostream& ostream,
        ccio::dalton_mol_entry::unit_of_length unit_of_length)
{
    auto it = ccio::dalton_mol_entry::unit_of_length_to_string.find(unit_of_length);
    if (it != ccio::dalton_mol_entry::unit_of_length_to_string.end()) {
        ostream << it->second;
    } else {
        throw std::logic_error("Uknown unit of length.");
    }
    return ostream;
}

std::ostream& ccio::operator<<(std::ostream& ostream, ccio::dalton_mol_entry::gaussians_type gaussians_type)
{
    auto it = ccio::dalton_mol_entry::gaussians_type_to_string.find(gaussians_type);
    if (it != ccio::dalton_mol_entry::gaussians_type_to_string.end()) {
        ostream << it->second;
    } else {
        throw std::logic_error("Uknown gaussians type.");
    }
    return ostream;
}

struct ccio::dalton_mol_entry::dalton_mol_entry_private
{
    dalton_mol_entry_private() :
        basis_type(ccio::dalton_mol_entry::basis_type::basis),
        basis_set("6-31G*"),
        comment("Comment line\nAutomaticly generated by %1 %2"),
        atom_types(0),
        generators(),
        integrals_threshold(1.0e-15),
        nosymmetry(false),
        unit_of_length(ccio::dalton_mol_entry::unit_of_length::bohr),
        gaussians_type(ccio::dalton_mol_entry::gaussians_type::spherical),
        basis_sets(),
        molecule()
    {}

    basis_type basis_type;
    std::string basis_set;
    std::string comment;
    unsigned int atom_types;
    std::vector<std::string> generators;
    double integrals_threshold;
    bool nosymmetry;
    unit_of_length unit_of_length;
    gaussians_type gaussians_type;
    std::map<unsigned int, std::string> basis_sets;
    ccio::molecule molecule;
};

ccio::dalton_mol_entry::dalton_mol_entry() :
    p(std::unique_ptr<dalton_mol_entry_private>(new dalton_mol_entry_private()))
{
}

ccio::dalton_mol_entry::~dalton_mol_entry()
{
}

ccio::dalton_mol_entry::basis_type ccio::dalton_mol_entry::get_basis_type() const
{
    return p->basis_type;
}

void ccio::dalton_mol_entry::set_basis_type(ccio::dalton_mol_entry::basis_type basis_type)
{
    p->basis_type = basis_type;
}

const std::string& ccio::dalton_mol_entry::get_comment() const
{
    return p->comment;
}

void ccio::dalton_mol_entry::set_comment(const std::string& comment)
{
    p->comment = comment;
}

unsigned int ccio::dalton_mol_entry::get_atom_types() const
{
    return p->atom_types;
}

void ccio::dalton_mol_entry::set_atom_types(unsigned int atom_types)
{
    p->atom_types = atom_types;
    LOG(debug) << "Atomtypes: " << p->atom_types << ".";
}

std::size_t ccio::dalton_mol_entry::get_number_of_generators() const
{
    return p->generators.size();
}

const std::vector<std::string>& ccio::dalton_mol_entry::generators() const
{
    return p->generators;
}

void ccio::dalton_mol_entry::add_generator(const std::string& generator)
{
    p->generators.push_back(generator);
}

double ccio::dalton_mol_entry::get_integrals_threshold() const
{
    return p->integrals_threshold;
}

void ccio::dalton_mol_entry::set_integrals_threshold(double integrals_threshold)
{
    p->integrals_threshold = integrals_threshold;
    LOG(debug) << "Integrals threshold: " << p->integrals_threshold << ".";
}

bool ccio::dalton_mol_entry::get_nosymmetry() const
{
    return p->nosymmetry;
}

void ccio::dalton_mol_entry::set_nosymmetry(bool nosymmetry)
{
    p->nosymmetry = nosymmetry;
}

bool ccio::dalton_mol_entry::is_addition_of_symmetry_requested() const
{
    return (!p->nosymmetry && get_number_of_generators() == 0);
}

ccio::dalton_mol_entry::unit_of_length ccio::dalton_mol_entry::get_unit_of_length() const
{
    return p->unit_of_length;
}

void ccio::dalton_mol_entry::set_unit_of_length(ccio::dalton_mol_entry::unit_of_length unit_of_length)
{
    p->unit_of_length = unit_of_length;
    LOG(debug) << "Unit of length: " << p->unit_of_length << ".";
}

ccio::dalton_mol_entry::gaussians_type ccio::dalton_mol_entry::get_gaussians_type() const
{
    return p->gaussians_type;
}

void ccio::dalton_mol_entry::set_gaussians_type(ccio::dalton_mol_entry::gaussians_type gaussians_type)
{
    p->gaussians_type = gaussians_type;
    LOG(debug) << "Gaussians type: " << p->gaussians_type << ".";
}

void ccio::dalton_mol_entry::set_basis_for_atom_type(unsigned int atomic_number, const std::string& basis_set)
{
    p->basis_sets.emplace(atomic_number, basis_set);
}

ccio::molecule& ccio::dalton_mol_entry::get_molecule()
{
    return p->molecule;
}

const ccio::molecule& ccio::dalton_mol_entry::get_molecule() const
{
    return p->molecule;
}
